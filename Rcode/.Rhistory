)
# Convert the region to a GRanges object
detail.region <- GRanges(
seqnames = region$chr,
ranges = IRanges(start = region$start, end = region$end)
)
xlim <- c(min(start(detail.region)), max(end(detail.region)) * 1.2)
kp <- karyoploteR::plotKaryotype(genome = "hg38", chromosomes = nchr, plot.params = pp,plot.type = 3,zoom = detail.region, xlim = xlim)
point_cex=2
} else if (!is.null(Gene_chorom)) {
detail.region <-  regioneR::toGRanges(Gene_chorom,Tumor_bbc_reform,Main="",genome="hg38")
kp <- karyoploteR::plotKaryotype(genome = "hg38", chromosomes = nchr, plot.params = pp,plot.type = 3)
point_cex=0.3
kpPlotRegions(kp, data = detail.region, col = "#F30943", r0 = 0, r1 = 0.05, border = "blue")
} else {
kp <- karyoploteR::plotKaryotype(genome = "hg38", chromosomes = nchr, plot.params = pp,plot.type = 3)
point_cex=0.3
}
karyoploteR::kpAbline(kp, h = 0.5, col = "green")
karyoploteR::kpAbline(kp, h = 0.25, col = "black")
# Iterate through segments and plot them using kpPlotRegions
for (i in 1:nrow(segments)) {
Data=segments[i,]
segment_data <- GRanges(seqnames = segments$chr[i],
ranges = IRanges(start = segments$start[i], end = segments$end[i]),
names = segments$genes[i])
kpPlotRegions(kp, data = segment_data, col = "#F30943", r0 = (Data$rdr)/2-0.02, r1 = (Data$rdr)/2+0.02, border = "#F30943")
# Add text for each segment showing the mean RDR
# if (!is.null(Gene_chorom)&(isTRUE(plot_zoom)  )) {
#    kpText(kp, chr = segments$chr[i], x = (segments$start[i] + segments$end[i]) / 2,
#           y = 0.5, labels =as.character(Data$genes), cex = 0.8)
#  }
}
CopyNumberPlots::plotLRR(kp, s1, lrr.column = "rdr", r0 = 0, r1 = 1, labels = "Read depth ratio", ymin = 0, ymax = 2, add.axis = TRUE, axis.cex = 1, label.cex = 1, points.cex = point_cex, data.panel = 1)
#p1 <- ggplotify::as.ggplot(plot_karyotype_grob_chr(nchr, Sample_name, df))
#  p1 <- ggplotify::as.ggplot(function() {plot_karyotype_chr (nchr, Sample_name, df, s1)} )
Tumor_baf=BAF_data[,c("chr","start","end","baf")]%>%as.data.frame()
s2 <- CopyNumberPlots:: loadSNPData(Tumor_baf)
karyoploteR::kpAbline(kp, h = 0.5, col = "green",data.panel = 2)
if (!is.null(Gene_chorom)&(isTRUE(plot_zoom)  )) {
for (i in 1:nrow(RD_bed)) {
Data=RD_bed[i,]
segment_data <- GRanges(seqnames = Data$chr,
ranges = IRanges(start = Data$start, end =Data$end),
names = Data$gene_name)
kpPlotRegions(kp, data = segment_data, col = "blue", r0 = 0.9, r1 =1, border = "#F30943",data.panel = 2)
kpText(kp, chr = Data$chr, x =Data$start+(Data$end-Data$start)/2,y = Data$y, labels =as.character(Data$gene_name), cex = 0.8,data.panel = 2)
# Add text for each segment showing the mean RDR
# if (!is.null(Gene_chorom)&(isTRUE(plot_zoom)  )) {
#    kpText(kp, chr = segments$chr[i], x = (segments$start[i] + segments$end[i]) / 2,
#           y = 0.5, labels =as.character(Data$genes), cex = 0.8)
#  }
}
}
CopyNumberPlots::plotBAF(kp,s2, r0=0, r1=1, labels = "BAF", points.col = "orange", points.cex = point_cex, add.axis = TRUE, points.pch = 16,label.cex = 1, axis.cex = 1, data.panel = 2)
# return(p1)
}
Test=plot_detected_segments_genelevel(RD_data_anno_norm,rdr_data,BAF_data_2,Gene_chorom=Choose_Seg_rdr,plot_zoom = T)
# Function to plot the segments detected by detect_segments_in_rdr
plot_detected_segments_genelevel <- function(RD_raw_data, segments,BAF_data,Gene_chorom=NULL,plot_zoom=F) {
# Load necessary libraries
library(karyoploteR)
library(ggplotify)
library(GenomicRanges)
library(CopyNumberPlots)
library(ensembldb)
library(EnsDb.Hsapiens.v86)
library(cowplot)
if (!is.null(Gene_chorom)&(isTRUE(plot_zoom)  )) {
RD_bed=RD_raw_data%>%as.data.frame()%>%dplyr::filter( start>=min(Gene_chorom$start))%>%dplyr::filter( end<=max(Gene_chorom$end))%>%group_by(gene_name)%>%
summarise(start=min(start),end=max(end))%>%arrange(start)%>% mutate(chr=unique(RD_raw_data$chr))%>%na.omit()%>%mutate(row_n=1:nrow(.))%>% mutate(y=ifelse(row_n%%2,0.8,0.6))
}
# Call the GATK_Chrom_Gene_RD_2 function to get the necessary data
colnames(RD_raw_data)=tolower(colnames(RD_raw_data))
Tumor_bbc_reform=RD_raw_data[,c("chr","start","end","rdr")]
colnames(Tumor_bbc_reform)=tolower(colnames(Tumor_bbc_reform))
# Set plot parameters
pp <- karyoploteR::getDefaultPlotParams(plot.type =5 )
pp$data1height <- 100
pp$data2height <- 100
pp$ideogramheight <- 0
pp$topmargin <- 10
# Extract data from the test object
nchr=RD_raw_data$chr%>%unique()
df <- Tumor_bbc_reform
s1 <- CopyNumberPlots:: loadSNPData(Tumor_bbc_reform)
if (!is.null(Gene_chorom) & (isTRUE(plot_zoom)  ) ) {
detail.region <-  regioneR::toGRanges(Gene_chorom,Tumor_bbc_reform,Main="",genome="hg38")
RD_bed$start <- as.numeric(RD_bed$start)
RD_bed$end <- as.numeric(RD_bed$end)
# Check if the chromosome column is properly formatted (in case it's a factor or string)
RD_bed$chr <- as.character(RD_bed$chr)
# If needed, print the structure to check the data types
str(RD_bed)
# Create the region based on RD_bed
region <- data.frame(
chr = unique(RD_bed$chr),
start = min(RD_bed$start, na.rm = TRUE),
end = max(RD_bed$end, na.rm = TRUE)
)
# Convert the region to a GRanges object
detail.region <- GRanges(
seqnames = region$chr,
ranges = IRanges(start = region$start-1000, end = region$end+1000)
)
kp <- karyoploteR::plotKaryotype(genome = "hg38", chromosomes = nchr, plot.params = pp,plot.type = 3,zoom = detail.region)
point_cex=2
} else if (!is.null(Gene_chorom)) {
detail.region <-  regioneR::toGRanges(Gene_chorom,Tumor_bbc_reform,Main="",genome="hg38")
kp <- karyoploteR::plotKaryotype(genome = "hg38", chromosomes = nchr, plot.params = pp,plot.type = 3)
point_cex=0.3
kpPlotRegions(kp, data = detail.region, col = "#F30943", r0 = 0, r1 = 0.05, border = "blue")
} else {
kp <- karyoploteR::plotKaryotype(genome = "hg38", chromosomes = nchr, plot.params = pp,plot.type = 3)
point_cex=0.3
}
karyoploteR::kpAbline(kp, h = 0.5, col = "green")
karyoploteR::kpAbline(kp, h = 0.25, col = "black")
# Iterate through segments and plot them using kpPlotRegions
for (i in 1:nrow(segments)) {
Data=segments[i,]
segment_data <- GRanges(seqnames = segments$chr[i],
ranges = IRanges(start = segments$start[i], end = segments$end[i]),
names = segments$genes[i])
kpPlotRegions(kp, data = segment_data, col = "#F30943", r0 = (Data$rdr)/2-0.02, r1 = (Data$rdr)/2+0.02, border = "#F30943")
# Add text for each segment showing the mean RDR
# if (!is.null(Gene_chorom)&(isTRUE(plot_zoom)  )) {
#    kpText(kp, chr = segments$chr[i], x = (segments$start[i] + segments$end[i]) / 2,
#           y = 0.5, labels =as.character(Data$genes), cex = 0.8)
#  }
}
CopyNumberPlots::plotLRR(kp, s1, lrr.column = "rdr", r0 = 0, r1 = 1, labels = "Read depth ratio", ymin = 0, ymax = 2, add.axis = TRUE, axis.cex = 1, label.cex = 1, points.cex = point_cex, data.panel = 1)
#p1 <- ggplotify::as.ggplot(plot_karyotype_grob_chr(nchr, Sample_name, df))
#  p1 <- ggplotify::as.ggplot(function() {plot_karyotype_chr (nchr, Sample_name, df, s1)} )
Tumor_baf=BAF_data[,c("chr","start","end","baf")]%>%as.data.frame()
s2 <- CopyNumberPlots:: loadSNPData(Tumor_baf)
karyoploteR::kpAbline(kp, h = 0.5, col = "green",data.panel = 2)
if (!is.null(Gene_chorom)&(isTRUE(plot_zoom)  )) {
for (i in 1:nrow(RD_bed)) {
Data=RD_bed[i,]
segment_data <- GRanges(seqnames = Data$chr,
ranges = IRanges(start = Data$start, end =Data$end),
names = Data$gene_name)
kpPlotRegions(kp, data = segment_data, col = "blue", r0 = 0.9, r1 =1, border = "#F30943",data.panel = 2)
kpText(kp, chr = Data$chr, x =Data$start+(Data$end-Data$start)/2,y = Data$y, labels =as.character(Data$gene_name), cex = 0.8,data.panel = 2)
# Add text for each segment showing the mean RDR
# if (!is.null(Gene_chorom)&(isTRUE(plot_zoom)  )) {
#    kpText(kp, chr = segments$chr[i], x = (segments$start[i] + segments$end[i]) / 2,
#           y = 0.5, labels =as.character(Data$genes), cex = 0.8)
#  }
}
}
CopyNumberPlots::plotBAF(kp,s2, r0=0, r1=1, labels = "BAF", points.col = "orange", points.cex = point_cex, add.axis = TRUE, points.pch = 16,label.cex = 1, axis.cex = 1, data.panel = 2)
# return(p1)
}
Test=plot_detected_segments_genelevel(RD_data_anno_norm,rdr_data,BAF_data_2,Gene_chorom=Choose_Seg_rdr,plot_zoom = T)
# Function to plot the segments detected by detect_segments_in_rdr
plot_detected_segments_genelevel <- function(RD_raw_data, segments,BAF_data,Gene_chorom=NULL,plot_zoom=F) {
# Load necessary libraries
library(karyoploteR)
library(ggplotify)
library(GenomicRanges)
library(CopyNumberPlots)
library(ensembldb)
library(EnsDb.Hsapiens.v86)
library(cowplot)
if (!is.null(Gene_chorom)&(isTRUE(plot_zoom)  )) {
RD_bed=RD_raw_data%>%as.data.frame()%>%dplyr::filter( start>=min(Gene_chorom$start))%>%dplyr::filter( end<=max(Gene_chorom$end))%>%group_by(gene_name)%>%
summarise(start=min(start),end=max(end))%>%arrange(start)%>% mutate(chr=unique(RD_raw_data$chr))%>%na.omit()%>%mutate(row_n=1:nrow(.))%>% mutate(y=ifelse(row_n%%2,0.8,0.6))
}
# Call the GATK_Chrom_Gene_RD_2 function to get the necessary data
colnames(RD_raw_data)=tolower(colnames(RD_raw_data))
Tumor_bbc_reform=RD_raw_data[,c("chr","start","end","rdr")]
colnames(Tumor_bbc_reform)=tolower(colnames(Tumor_bbc_reform))
# Set plot parameters
pp <- karyoploteR::getDefaultPlotParams(plot.type =5 )
pp$data1height <- 100
pp$data2height <- 100
pp$ideogramheight <- 0
pp$topmargin <- 10
# Extract data from the test object
nchr=RD_raw_data$chr%>%unique()
df <- Tumor_bbc_reform
s1 <- CopyNumberPlots:: loadSNPData(Tumor_bbc_reform)
if (!is.null(Gene_chorom) & (isTRUE(plot_zoom)  ) ) {
detail.region <-  regioneR::toGRanges(Gene_chorom,Tumor_bbc_reform,Main="",genome="hg38")
RD_bed$start <- as.numeric(RD_bed$start)
RD_bed$end <- as.numeric(RD_bed$end)
# Check if the chromosome column is properly formatted (in case it's a factor or string)
RD_bed$chr <- as.character(RD_bed$chr)
# If needed, print the structure to check the data types
str(RD_bed)
# Create the region based on RD_bed
region <- data.frame(
chr = unique(RD_bed$chr),
start = min(RD_bed$start, na.rm = TRUE),
end = max(RD_bed$end, na.rm = TRUE)
)
# Convert the region to a GRanges object
detail.region <- GRanges(
seqnames = region$chr,
ranges = IRanges(start = region$start-10000, end = region$end+10000)
)
kp <- karyoploteR::plotKaryotype(genome = "hg38", chromosomes = nchr, plot.params = pp,plot.type = 3,zoom = detail.region)
point_cex=2
} else if (!is.null(Gene_chorom)) {
detail.region <-  regioneR::toGRanges(Gene_chorom,Tumor_bbc_reform,Main="",genome="hg38")
kp <- karyoploteR::plotKaryotype(genome = "hg38", chromosomes = nchr, plot.params = pp,plot.type = 3)
point_cex=0.3
kpPlotRegions(kp, data = detail.region, col = "#F30943", r0 = 0, r1 = 0.05, border = "blue")
} else {
kp <- karyoploteR::plotKaryotype(genome = "hg38", chromosomes = nchr, plot.params = pp,plot.type = 3)
point_cex=0.3
}
karyoploteR::kpAbline(kp, h = 0.5, col = "green")
karyoploteR::kpAbline(kp, h = 0.25, col = "black")
# Iterate through segments and plot them using kpPlotRegions
for (i in 1:nrow(segments)) {
Data=segments[i,]
segment_data <- GRanges(seqnames = segments$chr[i],
ranges = IRanges(start = segments$start[i], end = segments$end[i]),
names = segments$genes[i])
kpPlotRegions(kp, data = segment_data, col = "#F30943", r0 = (Data$rdr)/2-0.02, r1 = (Data$rdr)/2+0.02, border = "#F30943")
# Add text for each segment showing the mean RDR
# if (!is.null(Gene_chorom)&(isTRUE(plot_zoom)  )) {
#    kpText(kp, chr = segments$chr[i], x = (segments$start[i] + segments$end[i]) / 2,
#           y = 0.5, labels =as.character(Data$genes), cex = 0.8)
#  }
}
CopyNumberPlots::plotLRR(kp, s1, lrr.column = "rdr", r0 = 0, r1 = 1, labels = "Read depth ratio", ymin = 0, ymax = 2, add.axis = TRUE, axis.cex = 1, label.cex = 1, points.cex = point_cex, data.panel = 1)
#p1 <- ggplotify::as.ggplot(plot_karyotype_grob_chr(nchr, Sample_name, df))
#  p1 <- ggplotify::as.ggplot(function() {plot_karyotype_chr (nchr, Sample_name, df, s1)} )
Tumor_baf=BAF_data[,c("chr","start","end","baf")]%>%as.data.frame()
s2 <- CopyNumberPlots:: loadSNPData(Tumor_baf)
karyoploteR::kpAbline(kp, h = 0.5, col = "green",data.panel = 2)
if (!is.null(Gene_chorom)&(isTRUE(plot_zoom)  )) {
for (i in 1:nrow(RD_bed)) {
Data=RD_bed[i,]
segment_data <- GRanges(seqnames = Data$chr,
ranges = IRanges(start = Data$start, end =Data$end),
names = Data$gene_name)
kpPlotRegions(kp, data = segment_data, col = "blue", r0 = 0.9, r1 =1, border = "#F30943",data.panel = 2)
kpText(kp, chr = Data$chr, x =Data$start+(Data$end-Data$start)/2,y = Data$y, labels =as.character(Data$gene_name), cex = 0.8,data.panel = 2)
# Add text for each segment showing the mean RDR
# if (!is.null(Gene_chorom)&(isTRUE(plot_zoom)  )) {
#    kpText(kp, chr = segments$chr[i], x = (segments$start[i] + segments$end[i]) / 2,
#           y = 0.5, labels =as.character(Data$genes), cex = 0.8)
#  }
}
}
CopyNumberPlots::plotBAF(kp,s2, r0=0, r1=1, labels = "BAF", points.col = "orange", points.cex = point_cex, add.axis = TRUE, points.pch = 16,label.cex = 1, axis.cex = 1, data.panel = 2)
# return(p1)
}
Test=plot_detected_segments_genelevel(RD_data_anno_norm,rdr_data,BAF_data_2,Gene_chorom=Choose_Seg_rdr,plot_zoom = T)
Test=plot_detected_segments_genelevel(RD_data_anno_norm,rdr_data,BAF_data_2,Gene_chorom=Choose_Seg_rdr,plot_zoom = T)
cowplot::plot_grid( segment_plot,segment_plot_detail,nrow=1)
if (file.exists(file.path(Process_path,PT_ID,"MTAP_CDKN2A",paste0(Sample_name,"_gene_level_Seg.rdata")))) {
load (file.path(Process_path,PT_ID,"MTAP_CDKN2A",paste0(Sample_name,"_gene_level_Seg.rdata")))
} else {
segment_plot_detail <-  ggplotify::as.ggplot(function() {plot_detected_segments_genelevel (RD_data_anno_norm,rdr_data,BAF_data_2,Gene_chorom=Choose_Seg_rdr,plot_zoom = T)})
segment_plot <-  ggplotify::as.ggplot(function() {plot_detected_segments (RD_data_anno_norm,rdr_data,BAF_data_2,Gene_chorom=Choose_Seg_rdr,plot_zoom = F)})
save(gene_rdr_level2,Choose_Seg_rdr,Choose_seg_baf2,segment_plot,segment_plot_detail,file=file.path(Process_path,PT_ID,"MTAP_CDKN2A",paste0(Sample_name,"_gene_level_Seg.rdata")))
}
#Test=plot_detected_segments_genelevel(RD_data_anno_norm,rdr_data,BAF_data_2,Gene_chorom=Choose_Seg_rdr,plot_zoom = T)
segment_plot_detail <-  ggplotify::as.ggplot(function() {plot_detected_segments_genelevel (RD_data_anno_norm,rdr_data,BAF_data_2,Gene_chorom=Choose_Seg_rdr,plot_zoom = T)})
cowplot::plot_grid( segment_plot,segment_plot_detail,nrow=1)
Choose_Seg_rdr2=Choose_Seg_rdr%>%mutate(genes=gsub(",", ", ",genes))
knitr::kable(Choose_Seg_rdr2,caption =   "Segmentation")%>%kableExtra::kable_styling(latex_options = c("scale_down"))%>%
kableExtra::column_spec(4, width = "5cm")
if (nrow(Choose_seg_baf2)>0) {
Choose_seg_baf_gene=Choose_seg_baf2%>%group_by(gene_name)%>%summarise(baf=mean(baf))
knitr::kable(Choose_seg_baf_gene,caption = "baf of genes in segments")%>%kableExtra::kable_styling(latex_options = c("scale_down"))
Gene_baf=Choose_seg_baf2[,c(1:4,7,11)]%>%as.data.frame()
knitr::kable(Gene_baf,caption = "BAF in bed")%>%kableExtra::kable_styling(latex_options = c("scale_down"))
}
Choose_seg_baf2
gene_exon_counts <-RD_data_anno_norm %>%
group_by(gene_name) %>%
summarise(exon_count = n())
summary(gene_exon_counts$exon_count)
gene_rdr_level=summarize_rdr_by_gene(RD_data_anno_norm)
RDR_data_no_gene=RD_data_anno_norm%>%dplyr::filter(gene_name=="")%>%mutate(gene_name=paste0("unknown",1:nrow(.)))
gene_rdr_level2=rbind(RDR_data_no_gene[,colnames(gene_rdr_level)],gene_rdr_level)
#segment_results_by_rdr=detect_segments_in_rdr(RD_data_anno_norm,threshold = 0.2, min_segment_size = 8)
segment_results_by_gene <- detect_segments_in_rdr_by_gene (gene_rdr_level2,threshold = 0.1, min_segment_size = 1)
rdr_data=segment_results_by_gene[[1]]%>%dplyr::rename(rdr=mean_rdr)
Choose_Seg_rdr=rdr_data%>%dplyr::filter(grepl("MTAP|CDKN2A",genes))
Choose_seg_baf=list()
for (i in 1:nrow(Choose_Seg_rdr)) {
Data=Choose_Seg_rdr[1,]
Baf_select =BAF_data_2%>%dplyr::filter(start>(Data$start-1))%>%dplyr::filter(end<(Data$end+1))
#Baf_select =BAF_data%>%mutate(baf=alt_count/(ref_count+alt_count))%>%mutate(baf=ifelse(baf>0.5,1-baf,baf))%>%mutate(start=position,end=position)%>%dplyr::filter(start>(Data$start-1))%>%dplyr::filter(end<(Data$end+1)) %>%dplyr::filter(alt_nucleotide!="N")
Choose_seg_baf[[i]]=add_gene_names_to_BAF(Baf_select)
}
Choose_seg_baf2=do.call("rbind", Choose_seg_baf)
Gene_list_in_region=Choose_Seg_rdr$genes%>%strsplit(.,",")%>%unlist()%>%.[!grepl("unknown",.)]
Choose_seg_baf2
Choose_seg_baf
Choose_Seg_rdr
Choose_seg_baf=list()
for (i in 1:nrow(Choose_Seg_rdr)) {
Data=Choose_Seg_rdr[1,]
Baf_select =BAF_data_2%>%dplyr::filter(start>(Data$start-1))%>%dplyr::filter(end<(Data$end+1))
#Baf_select =BAF_data%>%mutate(baf=alt_count/(ref_count+alt_count))%>%mutate(baf=ifelse(baf>0.5,1-baf,baf))%>%mutate(start=position,end=position)%>%dplyr::filter(start>(Data$start-1))%>%dplyr::filter(end<(Data$end+1)) %>%dplyr::filter(alt_nucleotide!="N")
Choose_seg_baf[[i]]=add_gene_names_to_BAF(Baf_select)
}
Choose_seg_baf
nrow(Choose_Seg_rdr)
for (i in 1:nrow(Choose_Seg_rdr)) {
Data=Choose_Seg_rdr[i,]
Baf_select =BAF_data_2%>%dplyr::filter(start>(Data$start-1))%>%dplyr::filter(end<(Data$end+1))
#Baf_select =BAF_data%>%mutate(baf=alt_count/(ref_count+alt_count))%>%mutate(baf=ifelse(baf>0.5,1-baf,baf))%>%mutate(start=position,end=position)%>%dplyr::filter(start>(Data$start-1))%>%dplyr::filter(end<(Data$end+1)) %>%dplyr::filter(alt_nucleotide!="N")
Choose_seg_baf[[i]]=add_gene_names_to_BAF(Baf_select)
}
Choose_seg_baf2=do.call("rbind", Choose_seg_baf)
Choose_seg_baf2
Gene_list_in_region=Choose_Seg_rdr$genes%>%strsplit(.,",")%>%unlist()%>%.[!grepl("unknown",.)]
if (nrow(Choose_seg_baf2)>0) {
Choose_seg_baf_gene=Choose_seg_baf2%>%group_by(gene_name)%>%summarise(baf=mean(baf))
knitr::kable(Choose_seg_baf_gene,caption = "baf of genes in segments")%>%kableExtra::kable_styling(latex_options = c("scale_down"))
Gene_baf=Choose_seg_baf2[,c(1:4,7,11)]%>%as.data.frame()
knitr::kable(Gene_baf,caption = "BAF in bed")%>%kableExtra::kable_styling(latex_options = c("scale_down"))
}
knitr::opts_chunk$set(echo =F,message = F,warning = F,include=F)
rm(list=ls())
library(biomaRt)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(grid)
source(file.path(getwd(),"Rfunction.R" ))
Path <- gsub("/R(/Rcode)?$", "", getwd())
Rawdata_path=file.path(Path,"Rawdata")
dir.create(Rawdata_path)
Process_path=file.path(Path,"Processed_data")
dir.create(Process_path)
# STAR-Salmon
Reference_path="/Volumes/lyu.yang/MAC_1/R/Public_database/Reference"
STAR_path="/Volumes/Hirbe_lab_Drive_5/Hirbe_SR003350_NF_RNAseq/Nextflow3--star_index/star_salmon"
dir("/Volumes/Hirbe_lab_Drive_5/Hirbe_SR003350_NF_RNAseq")
Rawcount_path=file.path(Rawdata_path,"salmon.merged.gene_counts.tsv")
TPM_path=file.path(Rawdata_path,"salmon.merged.gene_tpm.tsv")
Raw_counts=readr::read_tsv(Rawcount_path)
TPM_counts=readr::read_tsv(TPM_path)
load(file.path(Reference_path,"Human_GSEA","Protein_coding_genelist.rdata")) # loading Protein_coding_genelist data
Raw_counts_2=Raw_counts%>%.[,c(2:ncol(.))]%>%dplyr::filter(gene_name%in%Protein_coding_genelist)%>%group_by(gene_name)%>%summarise_all(mean)%>%as.data.frame()%>%matrix.please()%>%as.data.frame()%>%mutate_all(.,as.integer)
Tumor_count_log=log2(Raw_counts_2+1)
TPM_2=TPM_counts%>%.[,c(2:ncol(.))]%>%dplyr::filter(gene_name%in%Protein_coding_genelist)%>%group_by(gene_name)%>%summarise_all(mean)%>%as.data.frame()%>%matrix.please()%>%as.data.frame()
Drug_anno=readxl::read_excel(file.path(Rawdata_path,"Drug_annotation.xlsx"))
Drug_class_name="MEK"
RNAseq_anno_org=data.frame(Sample_name=colnames(Raw_counts_2))%>%mutate(individualID="MN2")%>% mutate(Drug =gsub(".*\\_","",Sample_name))%>%
mutate(Drug=ifelse(grepl("DMSO",Sample_name),"DMSO",Drug )) %>%
mutate(Timepoint=case_when(
grepl("0h",Sample_name)~"0h",
grepl("8h",Sample_name)~"8h",
grepl("24h",Sample_name)~"24h",
TRUE ~ NA_character_)) %>%
mutate(Drug =gsub("\\d","",Drug))%>%left_join(.,Drug_anno,by="Drug")%>%mutate(Time=ifelse(grepl("SEL|TRA$|RIB|PAL|RMC|VOR|TNO",Drug),"12192024","12272024"))%>%mutate(Time=ifelse(grepl("d1",Sample_name),"DMSO_d1",ifelse(grepl("d2",Sample_name),"DMSO_d2",Time )))
Drug_name = RNAseq_anno_org$Drug %>% unique()
Drug_name=factor(Drug_name,levels = Drug_name)
# Ensure you have 14 unique Drug names (1 for black, 13 other colors)
if (length(Drug_name) != 14) {
stop("The number of unique drugs should be 14, including the one colored black.")
}
# Use RColorBrewer to get 13 colors from the Paired palette
paired_colors =RColorBrewer:: brewer.pal(n = 12, name = "Paired")
extra_color =RColorBrewer:: brewer.pal(n = 8, name = "Set3")[1]  # Take one color from another palette (e.g., Set3)
# Combine black and the 13 colors
drug_colors = c("black", paired_colors, extra_color)
set.seed(12345)
RNAseq_DMSO_D2=RNAseq_anno_org%>%dplyr::filter(Drug=="DMSO")
RNAseq_DMSO_D2
RNAseq_anno=RNAseq_anno_org%>%mutate(Timepoint=ifelse(Time=="DMSO_d1"&Timepoint=="8h","24hc",ifelse(Time=="DMSO_d1"&Timepoint=="24h","8hc",Timepoint )))%>%mutate(Timepoint=gsub("c","",Timepoint))
Drug_name = RNAseq_anno$Drug %>% unique()
Drug_name=factor(Drug_name,levels = Drug_name)
# Ensure you have 14 unique Drug names (1 for black, 13 other colors)
if (length(Drug_name) != 14) {
stop("The number of unique drugs should be 14, including the one colored black.")
}
# Use RColorBrewer to get 13 colors from the Paired palette
paired_colors =RColorBrewer:: brewer.pal(n = 12, name = "Paired")
extra_color =RColorBrewer:: brewer.pal(n = 8, name = "Set3")[1]  # Take one color from another palette (e.g., Set3)
# Combine black and the 13 colors
drug_colors = c("black", paired_colors, extra_color)
set.seed(12345)
RNAseq_DMSO_D2=RNAseq_anno%>%dplyr::filter(Drug=="DMSO")%>%dplyr::filter(Sample_name!="MN.2_MPNST_b2_0h_DMSO3_d2")
RNAseq_DMSO_D2
RNAseq_DMSO_D=RNAseq_anno%>%dplyr::filter(Drug=="DMSO")%>%dplyr::filter(Sample_name!="MN.2_MPNST_b2_0h_DMSO3_d2")
Drug_pickup=RNAseq_DMSO_D%>%dplyr::filter(grepl(Drug_class_name,Drug_class))
# Select one DMSO group (There are two DMSO group)
DMSO_data=RNAseq_DMSO_D%>%dplyr::filter(Drug=="DMSO")%>%dplyr::filter(grepl("d2",Sample_name))
All_data=bind_rows(Drug_pickup,DMSO_data)%>%arrange(Drug,Timepoint)
knitr::kable(All_data[,1:6],caption = "Sample information")%>%kableExtra::kable_styling(latex_options = c("scale_down","hold_position"))
Drug_pickup=RNAseq_anno%>%dplyr::filter(grepl(Drug_class_name,Drug_class))
# Select one DMSO group (There are two DMSO group)
DMSO_data=RNAseq_DMSO_D%>%dplyr::filter(Drug=="DMSO")%>%dplyr::filter(grepl("d2",Sample_name))
All_data=bind_rows(Drug_pickup,DMSO_data)%>%arrange(Drug,Timepoint)
knitr::kable(All_data[,1:6],caption = "Sample information")%>%kableExtra::kable_styling(latex_options = c("scale_down","hold_position"))
Drug_pickup=RNAseq_anno%>%dplyr::filter(grepl(Drug_class_name,Drug_class))
# Select one DMSO group (There are two DMSO group)
DMSO_data=RNAseq_anno%>%dplyr::filter(Drug=="DMSO")%>%dplyr::filter(grepl("d2",Sample_name))
All_data=bind_rows(Drug_pickup,DMSO_data)%>%arrange(Drug,Timepoint)
knitr::kable(All_data[,1:6],caption = "Sample information")%>%kableExtra::kable_styling(latex_options = c("scale_down","hold_position"))
Drug_reslist=list()
for (i in Drug_pickup$Drug) {
DMSO_rawcounts=Raw_counts_2[,DMSO_data$Sample_name]
DMSO_anno=DMSO_data%>%.[,c("Sample_name","Drug","Timepoint")]
Drug_samples=RNAseq_anno%>%dplyr::filter(Drug==i)%>%.[,c("Sample_name","Drug","Timepoint")]
Drug_rawcounts=Raw_counts_2[,Drug_samples$Sample_name]
Drug_0h=DMSO_rawcounts[,grepl("0h",colnames(DMSO_rawcounts))]
colnames(Drug_0h)=gsub("DMSO",i,colnames(Drug_0h))
Drug_0h_anno=data.frame(Sample_name=colnames(Drug_0h),Drug=i,Timepoint="0h")
New_counts=cbind(DMSO_rawcounts,Drug_0h,Drug_rawcounts)
New_anno=rbind(DMSO_anno,Drug_0h_anno,Drug_samples)%>%mutate(Group=paste0(Drug,"_",Timepoint))
New_anno$Drug=factor(New_anno$Drug,levels = c("DMSO",i))
New_anno$Timepoint=factor(New_anno$Timepoint,levels = c("0h","8h","24h"))
rownames(New_anno)=New_anno[,1]
filter_counts <- selectGenes_BY_group(New_counts, min.count=10, N=0.90,New_anno)
deseq2Data=DESeq2:: DESeqDataSetFromMatrix(countData =filter_counts, colData =New_anno,design = ~Group)
deseq2VST <- DESeq2::vst(deseq2Data)%>%SummarizedExperiment::assay()
#dds_LRT= DESeq2::DESeq(deseq2Data,test="LRT", reduced =~Drug+Timepoint)
#res_LRT = DESeq2::results(dds_LRT)
dds <- DESeq2::DESeq(deseq2Data)
res_list=list()
Timepoint=c("8h","24h")
for (t in Timepoint) {
drug_0h=paste0(i,"_","0h")
DMSO_t=paste0("DMSO","_",t)
group1=paste0(i,"_",t)
res_list[[t]]=list(drug_vs_0h=DESeq2::results(dds, contrast = c("Group", group1, drug_0h)),
drug_vs_DMSO=DESeq2::results(dds, contrast = c("Group", group1, DMSO_t)))
names(res_list[[t]])=c(paste0(i,"_",t,"_vs_",i ,"_0h"), paste0(i,"_",t,"_vs_","DMSO_",t))
}
Drug_reslist[[i]]=list(Counts=New_counts,Anno=New_anno,deseq2VST,DDS=dds,VST=deseq2VST,RES=res_list)
}
names(Drug_reslist)
save(Drug_reslist,file=file.path(Process_path,"Deseq2_OUT_vs_DMSO_d2.rdata" ))
plot_list=list()
for (d in unique(Drug_pickup$Drug)) {
Drug= Drug_pickup$Drug[d]
Data=Drug_reslist[[d]]
RES_all=Data$RES
for (i in 1:length(RES_all)) {
RES_t=RES_all[[i]]
time=names(RES_all)[i]
for (t in names(RES_t)){
RES1=RES_t[[t]]%>%as.data.frame()%>%mutate(gene_symbol=rownames(.))
#list_name=t
plot_list[[t]]=Volcano_plot_rnaseq_simple_2(RES1,top_n = 20)+ggtitle(t)
}
}
}
Volcano_plot_rnaseq_simple_2
source("/Volumes/lyu.yang/MAC_1/R/Project/21_PDX_drug_2/R/Rfunction.R")
plot_list=list()
for (d in unique(Drug_pickup$Drug)) {
Drug= Drug_pickup$Drug[d]
Data=Drug_reslist[[d]]
RES_all=Data$RES
for (i in 1:length(RES_all)) {
RES_t=RES_all[[i]]
time=names(RES_all)[i]
for (t in names(RES_t)){
RES1=RES_t[[t]]%>%as.data.frame()%>%mutate(gene_symbol=rownames(.))
#list_name=t
plot_list[[t]]=Volcano_plot_rnaseq_simple_2(RES1,top_n = 20)+ggtitle(t)
}
}
}
cowplot::plot_grid(plotlist=plot_list,ncol=4)
t
plot_list=list()
for (d in unique(Drug_pickup$Drug)) {
Drug= Drug_pickup$Drug[d]
Data=Drug_reslist[[d]]
RES_all=Data$VST%>%as.data.frame()
plot_list[[d]]=PCA_Plot_3_shape (t(RES_all),All_data,"Sample_name","Drug","Timepoint")
colnames(RES_all)
}
cowplot::plot_grid(plotlist=plot_list,ncol=4)
plot_list=list()
for (d in unique(Drug_pickup$Drug)) {
Drug= Drug_pickup$Drug[d]
Data=Drug_reslist[[d]]
RES_all=Data$RES
for (i in 1:length(RES_all)) {
RES_t=RES_all[[i]]
time=names(RES_all)[i]
for (t in names(RES_t)){
RES1=RES_t[[t]]%>%as.data.frame()%>%mutate(gene_symbol=rownames(.))
#list_name=t
plot_list[[t]]=Bar_plot_RES (RES1, FC_cutoff = 0.67)+ggtitle(t)
}
}
}
source("/Volumes/lyu.yang/MAC_1/R/Project/21_PDX_drug_2/R/Rfunction.R")
plot_list=list()
for (d in unique(Drug_pickup$Drug)) {
Drug= Drug_pickup$Drug[d]
Data=Drug_reslist[[d]]
RES_all=Data$RES
for (i in 1:length(RES_all)) {
RES_t=RES_all[[i]]
time=names(RES_all)[i]
for (t in names(RES_t)){
RES1=RES_t[[t]]%>%as.data.frame()%>%mutate(gene_symbol=rownames(.))
#list_name=t
plot_list[[t]]=Bar_plot_RES (RES1, FC_cutoff = 0.67)+ggtitle(t)
}
}
}
cowplot::plot_grid(plotlist=plot_list,ncol=4)
